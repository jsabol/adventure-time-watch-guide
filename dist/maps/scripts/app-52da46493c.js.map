{"version":3,"sources":["scripts/app.js"],"names":["angular","module","MainController","$log","$http","getEpisodes","get","then","response","rows","data","feed","entry","vm","episodes","map","processEpisodeData","totalEpisodes","length","ep","arcs","gsx$keywords","$t","push","gsx$keywords2","gsx$keywords3","gsx$keywords4","season","parseInt","gsx$partofseason","number","gsx$episodenumber","title","gsx$name","article","gsx$article","tier","gsx$priority","this","currentTier","totalSeasons","isInTier","value","showSeasonHeader","$index","arr","$inject","controller","filter","minutes","Date","setSeconds","totalMinutes","hours","mins","Math","floor","runBlock","debug","run","constant","malarkey","moment","config","$logProvider","toastrConfig","debugEnabled","allowHtml","timeOut","positionClass","preventDuplicates","progressBar"],"mappings":"CAAA,WACE,YAEAA,SACGC,OAAO,2BAA4B,SAAU,eAAgB,cAIlE,WACE,YAOA,SAASC,GAAeC,EAAMC,GAoB5B,QAASC,KACPD,EAAME,IAAI,oHACPC,KAAK,SAAiBC,GACrB,GAAIC,GAAOD,EAASE,KAAKC,KAAKC,KAC9BC,GAAGC,SAAWL,EAAKM,IAAIC,GACvBH,EAAGI,cAAgBJ,EAAGC,SAASI,QAC9B,cAMP,QAASF,GAAmBG,GAG1B,GAAIC,KAcJ,OAbGD,GAAGE,aAAaC,IACjBF,EAAKG,KAAKJ,EAAGE,aAAaC,IAEzBH,EAAGK,cAAcF,IAClBF,EAAKG,KAAKJ,EAAGK,cAAcF,IAE1BH,EAAGM,cAAcH,IAClBF,EAAKG,KAAKJ,EAAGM,cAAcH,IAE1BH,EAAGO,cAAcJ,IAClBF,EAAKG,KAAKJ,EAAGO,cAAcJ,KAI3BK,OAAQC,SAAST,EAAGU,iBAAiBP,IACrCQ,OAAQF,SAAST,EAAGY,kBAAkBT,IACtCU,MAAOb,EAAGc,SAASX,GACnBF,KAAMA,EACNc,QAASf,EAAGgB,YAAYb,GACxBc,KAAMR,SAAST,EAAGkB,aAAaf,KAtDnC,GAAIT,GAAKyB,IAETzB,GAAGC,YACHD,EAAG0B,YAAc,EACjB1B,EAAGI,cAAgB,EAGnBJ,EAAG2B,aAAe,EAElBnC,IAEAQ,EAAG4B,SAAW,SAASC,GACnB,MAAOA,GAAMN,MAAQvB,EAAG0B,aAG5B1B,EAAG8B,iBAAmB,SAASxB,EAAIyB,EAAQC,GACzC,MAAiB,IAAVD,GAAgBzB,EAAGQ,QAAUkB,EAAID,EAAO,GAAGjB,QAtBtDzB,EAAe4C,SAAW,OAAQ,SAAlC9C,QACGC,OAAO,2BACP8C,WAAW,iBAAkB7C,MAkElCF,QAAQC,OAAO,2BACZ+C,OAAO,iBAAkB,WACxB,MAAO,UAASC,GACZ,MAAO,IAAIC,MAAK,KAAM,EAAG,GAAGC,WAAmB,GAARF,OAK/CjD,QAAQC,OAAO,2BACZ+C,OAAO,kBAAmB,WACzB,MAAO,UAASlC,GACd,GAAIsC,GAA0B,GAAXtC,EACfuC,EAAQD,EAAe,GACvBE,EAAOF,EAAe,EAC1B,OAAOG,MAAKC,MAAMH,GAAS,OAAQC,EAAO,WAGhD,WACE,YAOA,SAASG,GAAStD,GAEhBA,EAAKuD,MAAM,gBANbD,EAASX,SAAW,QADpB9C,QACGC,OAAO,2BACP0D,IAAIF,MAWT,WACE,YAEAzD,SACGC,OAAO,2BACP2D,SAAS,WAAYC,UACrBD,SAAS,SAAUE,WAIxB,WACE,YAOA,SAASC,GAAOC,EAAcC,GAE5BD,EAAaE,cAAa,GAG1BD,EAAaE,WAAY,EACzBF,EAAaG,QAAU,IACvBH,EAAaI,cAAgB,kBAC7BJ,EAAaK,mBAAoB,EACjCL,EAAaM,aAAc,EAZ7BR,EAAOjB,SAAW,eAAgB,gBAFlC9C,QACGC,OAAO,2BACP8D,OAAOA","file":"scripts/app-52da46493c.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular\n    .module('adventureTimeWatchGuide', ['ngAria', 'ui.bootstrap', 'toastr']);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('adventureTimeWatchGuide')\n    .controller('MainController', MainController);\n\n  /** @ngInject */\n  function MainController($log, $http) {\n    var vm = this;\n\n    vm.episodes = [];\n    vm.currentTier = 1;\n    vm.totalEpisodes = 0;\n\n    //temporary\n    vm.totalSeasons = 7;\n\n    getEpisodes();\n\n    vm.isInTier = function(value){\n        return value.tier <= vm.currentTier;\n    };\n\n    vm.showSeasonHeader = function(ep, $index, arr){\n      return $index == 0 || (ep.season != arr[$index-1].season);\n    }\n\n    function getEpisodes(){\n      $http.get('https://spreadsheets.google.com/feeds/list/14ciO3hpZXigTlBWdi0aCyxOXeSKEAdlb1BPBpCKAqKk/2/public/values?alt=json')\n        .then(function success(response){\n          var rows = response.data.feed.entry;\n          vm.episodes = rows.map(processEpisodeData);\n          vm.totalEpisodes = vm.episodes.length;\n        }, function error(){\n\n        });\n    }\n\n\n    function processEpisodeData(ep){\n\n      //create arc array\n      var arcs = [];\n      if(ep.gsx$keywords.$t){\n        arcs.push(ep.gsx$keywords.$t);\n      }\n      if(ep.gsx$keywords2.$t){\n        arcs.push(ep.gsx$keywords2.$t);\n      }\n      if(ep.gsx$keywords3.$t){\n        arcs.push(ep.gsx$keywords3.$t);\n      }\n      if(ep.gsx$keywords4.$t){\n        arcs.push(ep.gsx$keywords4.$t);\n      }\n\n      return {\n        season: parseInt(ep.gsx$partofseason.$t),\n        number: parseInt(ep.gsx$episodenumber.$t),\n        title: ep.gsx$name.$t,\n        arcs: arcs,\n        article: ep.gsx$article.$t,\n        tier: parseInt(ep.gsx$priority.$t)\n      };\n\n    }//processEpisodeData\n\n  }\n})();\n\nangular.module('adventureTimeWatchGuide')\n  .filter('minutesToTime', [function() {\n    return function(minutes) {\n        return new Date(1970, 0, 1).setSeconds(minutes*60);\n    };\n}])\n\n\nangular.module('adventureTimeWatchGuide')\n  .filter('episodesToTime', [function() {\n    return function(episodes) {\n      var totalMinutes = episodes * 11;\n      var hours = totalMinutes / 60;\n      var mins = totalMinutes % 60;\n      return Math.floor(hours) + ' hr '+ mins + ' min';\n    };\n}]);\n(function() {\n  'use strict';\n\n  angular\n    .module('adventureTimeWatchGuide')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock($log) {\n\n    $log.debug('runBlock end');\n  }\n\n})();\n\n/* global malarkey:false, moment:false */\n(function() {\n  'use strict';\n\n  angular\n    .module('adventureTimeWatchGuide')\n    .constant('malarkey', malarkey)\n    .constant('moment', moment);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('adventureTimeWatchGuide')\n    .config(config);\n\n  /** @ngInject */\n  function config($logProvider, toastrConfig) {\n    // Enable log\n    $logProvider.debugEnabled(true);\n\n    // Set options third-party lib\n    toastrConfig.allowHtml = true;\n    toastrConfig.timeOut = 3000;\n    toastrConfig.positionClass = 'toast-top-right';\n    toastrConfig.preventDuplicates = true;\n    toastrConfig.progressBar = true;\n  }\n\n})();\n"],"sourceRoot":"/source/"}